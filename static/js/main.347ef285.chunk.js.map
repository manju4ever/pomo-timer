{"version":3,"sources":["Stopwatch.js","App.js","index.js"],"names":["stopwatch","timeToEnd","unit","Boolean","Number","Error","parsedTimeToEnd","parseInt","cancelAfter","divisor","elapsed_total_seconds","elapsed_seconds","elapsed_min","counter","isRunning","isTimerEnded","_start","_reset","console","log","setInterval","Math","floor","_stop","clearInterval","_timeRemaining","start","stop","reset","peek","isStopped","timeRemaining","background_colors","App","useState","watch","time","setTime","className","style","background","onClick","within","length","round","random","ic","window","document","title","ReactDOM","render","getElementById"],"mappings":"iKAqFeA,G,KArFG,WAAiC,IAAhCC,EAA+B,uDAAnB,GAAIC,EAAe,uDAAR,IAExC,IAAID,IAAeE,QAAQC,OAAOH,IAChC,MAAM,IAAII,MAAJ,gEAAmEJ,IAG3E,IAAMK,EAAkBC,SAASH,OAAOH,IAEpCO,EAAc,EACdC,EAAU,IACVC,EAAwB,EACxBC,EAAkB,EAClBC,EAAc,EACdC,EAAU,KACVC,GAAY,EACZC,GAAe,EAEjB,OAAOb,GACL,IAAK,IAAMM,EAAgC,IAAlBF,EAAwB,MACjD,IAAK,IACDE,EAAgC,GAAlBF,EAAuB,IACrCG,GAAoB,GACpB,MAEJ,QAASD,EAAgC,IAAlBF,EAGzB,SAASU,IAEFD,GAAcE,IACdH,IAEHA,GAAa,EACbC,GAAe,EAEfG,QAAQC,IAAR,mBACAD,QAAQC,IAAR,sBAAmCX,EAAcC,EAASP,GAE1DW,EAAUO,aAAY,WACpBV,IACAC,IACAC,EAAcS,KAAKC,MAAMZ,EAAwB,IAG1B,KAApBC,IACDA,EAAkB,GAIO,IAAxBD,IAAiCF,IAClCe,IACAT,GAAY,KAEb,MAGP,SAASS,IACPC,cAAcX,GACdK,QAAQC,IAAR,mBAGF,SAASF,IACPM,IACAZ,EAAkB,EAClBD,EAAwB,EACxBE,EAAc,EACdG,GAAe,EACfD,GAAY,EAGd,SAASW,IACP,MAAM,GAAN,OAAUJ,KAAKC,OAAOd,EAAcE,GAAf,KAArB,aAA4E,IAAMC,GAAmB,IAArG,KAGF,MAAO,CACLe,MAAOV,EACPW,KAAMJ,EACNK,MAAOX,EACPY,KAAM,2BAASjB,EAAT,aAAyBD,EAAzB,MACNmB,UAAW,kBAAMf,GACjBD,UAAW,kBAAMA,GACjBiB,cAAeN,KC5EfO,EAAoB,CACxB,UACA,UACA,UACA,WA0DaC,MAnDf,WAAe,MAGaC,mBAASlC,EAAU,GAAI,MAHpC,mBAGNmC,EAHM,aAIWD,mBAASC,EAAMJ,kBAJ1B,mBAINK,EAJM,KAIAC,EAJA,KAkCb,OACE,yBAAKC,UAAU,YAAYC,MAAO,CAChCC,WAAW,qDACVC,QA/Be,WAClB,IAXqBC,IAWkCV,EAAkBW,OAVpEtB,KAAKuB,MAAsB,IAAhBvB,KAAKwB,YAyCjB,yBAAKP,UAAU,aACX,4BAAKF,GACL,yBAAKE,UAAU,YAEVH,EAAMrB,YAAc,4BAAQ2B,QApBzB,WAChBN,EAAMR,OACNU,EAAQF,EAAMJ,mBAkBmB,QAA4C,4BAAQU,QA/BpE,WACf,IAAIN,EAAMrB,YAAa,CACrBqB,EAAMT,QACN,IAAMoB,EAAK1B,aAAY,WACtB2B,OAAOC,SAASC,MAAQd,EAAMJ,gBAC9BM,EAAQF,EAAMJ,iBACXI,EAAML,aAAaN,cAAcsB,KAClC,QAwBsE,SAElE,4BAAQL,QAjBF,WACjBN,EAAMP,QACNmB,OAAOC,SAASC,MAAQd,EAAMJ,gBAC9BM,EAAQF,EAAMJ,mBAcH,aCxDfmB,IAASC,OACP,kBAAC,EAAD,MACAH,SAASI,eAAe,U","file":"static/js/main.347ef285.chunk.js","sourcesContent":["const stopwatch = (timeToEnd = 10, unit = 's') => {\n\n  if(!timeToEnd || !(Boolean(Number(timeToEnd)))) {\n    throw new Error(`Expected time to be of type Number instead got ${typeof timeToEnd}`)\n  }\n\n  const parsedTimeToEnd = parseInt(Number(timeToEnd));\n\n  let cancelAfter = 0, \n      divisor = 1000,\n      elapsed_total_seconds = 0,\n      elapsed_seconds = 0,\n      elapsed_min = 0,\n      counter = null,\n      isRunning = false,\n      isTimerEnded = false;\n\n    switch(unit) {\n      case 's' : cancelAfter = parsedTimeToEnd * 1000; break;\n      case 'm' : {\n          cancelAfter = parsedTimeToEnd * 60 * 1000; \n          divisor = divisor * 60; \n          break;\n      }\n      default: cancelAfter = parsedTimeToEnd * 1000\n    }\n\n    function _start() {\n        \n        if(isTimerEnded) _reset();\n        if(isRunning) return;\n\n        isRunning  = true;\n        isTimerEnded = false;\n\n        console.log(`Timer Started !`);\n        console.log(`Timer will stop in `, cancelAfter / divisor, unit);\n        \n        counter = setInterval(() => {\n          elapsed_total_seconds++;\n          elapsed_seconds++;\n          elapsed_min = Math.floor(elapsed_total_seconds / 60);\n          \n          // Reset the elapsed_seconds again\n          if(elapsed_seconds === 60) {\n            elapsed_seconds = 0;\n          }\n\n          // check elapsed_total_seconds equals cancelAfter\n          if(elapsed_total_seconds * 1000 === cancelAfter) {\n            _stop();\n            isRunning = false;\n          }\n        }, 1000);\n    }\n\n    function _stop() {\n      clearInterval(counter);\n      console.log(`Timer stopped !`);\n    }\n\n    function _reset() {\n      _stop();\n      elapsed_seconds = 0;\n      elapsed_total_seconds = 0;\n      elapsed_min = 0;\n      isTimerEnded = true;\n      isRunning = false;\n    }\n\n    function _timeRemaining() { \n      return `${Math.floor((cancelAfter - elapsed_total_seconds)/(60 * 1000))}m ${60 - (elapsed_seconds || 60)}s`;\n    }\n\n    return {\n      start: _start,\n      stop: _stop,\n      reset: _reset,\n      peek: () => `${elapsed_min}m ${elapsed_seconds}s`,\n      isStopped: () => isTimerEnded,\n      isRunning: () => isRunning,\n      timeRemaining: _timeRemaining,\n    };\n};\n\nexport default stopwatch;\n","import React, { useState } from 'react';\nimport './App.css';\n\nimport stopwatch from './Stopwatch';\n\nconst background_colors = [\n  \"#fbc531\",\n  \"#273c75\",\n  \"#40739e\",\n  \"#e84118\"\n];\n\nconst getRandomNumber = (within) => {\n  return Math.round(Math.random() * 100) % within;\n}\n\nfunction App() {\n\n  // const [my_background, setBackground] = useState(\"#273c75\");\n  const [watch, setWatch] = useState(stopwatch(25, 'm'));\n  const [time, setTime] = useState(watch.timeRemaining());\n\n  const changeColor = () => {\n    const random_color = background_colors[getRandomNumber(background_colors.length)];\n    //setBackground(random_color); // 1 time\n  }\n\n  const startTimer = () => {\n      if(!watch.isRunning()) {\n        watch.start();\n        const ic = setInterval(() => {\n         window.document.title = watch.timeRemaining();\n         setTime(watch.timeRemaining());\n         if(watch.isStopped()) clearInterval(ic);\n        }, 800);\n      }\n  }\n\n  const stopTimer = () => {\n    watch.stop();\n    setTime(watch.timeRemaining());\n  }\n\n  const resetTimer = () => {\n    watch.reset();\n    window.document.title = watch.timeRemaining();\n    setTime(watch.timeRemaining());\n  }\n\n  // Render block - how to rerun ?\n  return (\n    <div className=\"container\" style={{\n      background: `URL(https://i.picsum.photos/id/619/2200/1200.jpg)`\n    }} onClick={changeColor}>\n        <div className=\"stopwatch\">\n            <h1>{time}</h1>\n            <div className=\"controls\">\n               {\n                 watch.isRunning() ? <button onClick={stopTimer}>STOP</button> : <button onClick={startTimer}>START</button>\n               }\n               <button onClick={resetTimer}>RESET</button>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}